{
  "api/Nba.Core.IDbSettings.html": {
    "href": "api/Nba.Core.IDbSettings.html",
    "title": "Interface IDbSettings | Nba Api",
    "keywords": "Interface IDbSettings Namespace Nba.Core Assembly Nba.Core.dll public interface IDbSettings Properties Collection string Collection { get; set; } Property Value string ConnectionString string ConnectionString { get; set; } Property Value string Database string Database { get; set; } Property Value string"
  },
  "api/Nba.Core.MongoDbSettings.html": {
    "href": "api/Nba.Core.MongoDbSettings.html",
    "title": "Class MongoDbSettings | Nba Api",
    "keywords": "Class MongoDbSettings Namespace Nba.Core Assembly Nba.Core.dll public class MongoDbSettings : IDbSettings Inheritance object MongoDbSettings Implements IDbSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Collection public string Collection { get; set; } Property Value string ConnectionString public string ConnectionString { get; set; } Property Value string Database public string Database { get; set; } Property Value string"
  },
  "api/Nba.Core.NbaService.html": {
    "href": "api/Nba.Core.NbaService.html",
    "title": "Class NbaService | Nba Api",
    "keywords": "Class NbaService Namespace Nba.Core Assembly Nba.Core.dll public class NbaService Inheritance object NbaService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NbaService(IDbSettings) public NbaService(IDbSettings settings) Parameters settings IDbSettings Methods Create(Teams) public Teams Create(Teams team) Parameters team Teams Returns Teams Delete(string) public long Delete(string id) Parameters id string Returns long GetAll() public List<Teams> GetAll() Returns List<Teams> GetSingle(string) public Teams GetSingle(string id) Parameters id string Returns Teams Update(string, Teams) public long Update(string id, Teams currentInfo) Parameters id string currentInfo Teams Returns long"
  },
  "api/Nba.Core.Teams.html": {
    "href": "api/Nba.Core.Teams.html",
    "title": "Class Teams | Nba Api",
    "keywords": "Class Teams Namespace Nba.Core Assembly Nba.Core.dll public class Teams Inheritance object Teams Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Abbreviation [BsonElement(\"abbreviation\")] public string Abbreviation { get; set; } Property Value string Id [BsonId] [BsonRepresentation(BsonType.ObjectId)] public string Id { get; set; } Property Value string Location [BsonElement(\"location\")] public string Location { get; set; } Property Value string SimpleName [BsonElement(\"simpleName\")] public string SimpleName { get; set; } Property Value string TeamId [BsonElement(\"teamId\")] public long TeamId { get; set; } Property Value long TeamName [BsonElement(\"teamName\")] public string TeamName { get; set; } Property Value string"
  },
  "api/Nba.Core.html": {
    "href": "api/Nba.Core.html",
    "title": "Namespace Nba.Core | Nba Api",
    "keywords": "Namespace Nba.Core Classes MongoDbSettings NbaService Teams Interfaces IDbSettings"
  },
  "api/Nba.WebApi.Controllers.TeamsController.html": {
    "href": "api/Nba.WebApi.Controllers.TeamsController.html",
    "title": "Class TeamsController | Nba Api",
    "keywords": "Class TeamsController Namespace Nba.WebApi.Controllers Assembly Nba.WebApi.dll [Route(\"Nba/api/[controller]\")] [ApiController] public class TeamsController : ControllerBase Inheritance object ControllerBase TeamsController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TeamsController(IDbSettings) public TeamsController(IDbSettings settings) Parameters settings IDbSettings Methods Create(Teams) Yeni takım oluşturur. [HttpPost] public ActionResult<Teams> Create(Teams team) Parameters team Teams Yeni bir takım nesnesi Returns ActionResult<Teams> Delete(string) Verilen id değerindeki kaydı siler. [HttpDelete(\"{id:length(24)}\")] public IActionResult Delete(string id) Parameters id string Takımın id değeri Returns IActionResult Kayıt yoksa NotFoundResult döner. Başarılıysa OkResult döner. Get() Bütün kayıtları getirir. [HttpGet] public ActionResult<List<Teams>> Get() Returns ActionResult<List<Teams>> Teams tipinde bir takım listesini döner. Get(string) Verilen id değerindeki kaydı getirir. [HttpGet(\"{id:length(24)}\")] public ActionResult<Teams> Get(string id) Parameters id string Takımın id değeri Returns ActionResult<Teams> Teams tipinde takım döner. Update(string, Teams) Verilen id değerindeki kaydı günceller. [HttpPut(\"{id:length(24)}\")] public ActionResult Update(string id, Teams currentTeam) Parameters id string Takımın id değeri currentTeam Teams Güncellenecek kayıt Returns ActionResult Kayıt yoksa NotFoundResult döner. Başarılıysa OkResult döner."
  },
  "api/Nba.WebApi.Controllers.html": {
    "href": "api/Nba.WebApi.Controllers.html",
    "title": "Namespace Nba.WebApi.Controllers | Nba Api",
    "keywords": "Namespace Nba.WebApi.Controllers Classes TeamsController"
  },
  "api/Nba.WebApi.Program.html": {
    "href": "api/Nba.WebApi.Program.html",
    "title": "Class Program | Nba Api",
    "keywords": "Class Program Namespace Nba.WebApi Assembly Nba.WebApi.dll public class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateHostBuilder(string[]) public static IHostBuilder CreateHostBuilder(string[] args) Parameters args string[] Returns IHostBuilder Main(string[]) public static void Main(string[] args) Parameters args string[]"
  },
  "api/Nba.WebApi.Startup.html": {
    "href": "api/Nba.WebApi.Startup.html",
    "title": "Class Startup | Nba Api",
    "keywords": "Class Startup Namespace Nba.WebApi Assembly Nba.WebApi.dll public class Startup Inheritance object Startup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Startup(IConfiguration) public Startup(IConfiguration configuration) Parameters configuration IConfiguration Properties Configuration public IConfiguration Configuration { get; } Property Value IConfiguration Methods Configure(IApplicationBuilder, IWebHostEnvironment) public void Configure(IApplicationBuilder app, IWebHostEnvironment env) Parameters app IApplicationBuilder env IWebHostEnvironment ConfigureServices(IServiceCollection) public void ConfigureServices(IServiceCollection services) Parameters services IServiceCollection"
  },
  "api/Nba.WebApi.html": {
    "href": "api/Nba.WebApi.html",
    "title": "Namespace Nba.WebApi | Nba Api",
    "keywords": "Namespace Nba.WebApi Classes Program Startup"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | Nba Api",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Nba Api",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Nba Api",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}